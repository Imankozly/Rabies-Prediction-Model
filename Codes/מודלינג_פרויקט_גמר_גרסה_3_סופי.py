# -*- coding: utf-8 -*-
"""מודלינג פרויקט גמר גרסה 3 סופי.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q--hAeKdSvedGbSAdJ6puLrcnyINbGqz

מודלינג פרויקט גמר שלב מידול נתונים - גרסה 3 סופי - לאחר שיפור הפלט והביצועים ללא בעיות
"""

# -------------------- Imports --------------------
import pandas as pd
import numpy as np
from sklearn.model_selection import KFold
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, ExtraTreesClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.multioutput import MultiOutputClassifier
import xgboost as xgb
import lightgbm as lgb
!pip install catboost
from catboost import CatBoostClassifier
import warnings
warnings.filterwarnings("ignore")

# -------------------- Load and Preprocess --------------------
path = "/content/Rabies__Weather__War_Combined_1.4.25.xlsx"
df = pd.read_excel(path)

df = df.drop(columns=['Date', 'War Name', 'Event Per Year', 'Index Event ID'])
df['War in Israel'] = df['War in Israel'].map({'Yes': 1, 'No': 0})
month_names = {i: name for i, name in enumerate(['January', 'February', 'March', 'April', 'May', 'June',
                                                 'July', 'August', 'September', 'October', 'November', 'December'], 1)}
df['Month'] = df['Month'].map(month_names)

label_cols = ['Animal Species', 'Rabies Species', 'Region', 'Settlement', 'Region_Weather', 'Month']
for col in label_cols:
    df[col] = LabelEncoder().fit_transform(df[col].astype(str))

num_cols = ['x', 'y', 'Avg Temperature', 'Monthly Precipitation (mm)', 'Rainy Days']
df[num_cols] = StandardScaler().fit_transform(df[num_cols])

X = df.drop(columns=['Region', 'Month'])
y = df[['Region', 'Month']]

# -------------------- Define Models --------------------
base_models = {
    'Logistic Regression': LogisticRegression(max_iter=1000),
    'LightGBM': lgb.LGBMClassifier(verbose=-1, n_estimators=100),
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier(),
    'K-Nearest Neighbors': KNeighborsClassifier(),
    'SVC': SVC(),
    'Naive Bayes': GaussianNB(),
    'XGBoost': xgb.XGBClassifier(eval_metric='mlogloss'),
    'Gradient Boosting': GradientBoostingClassifier(),
    'Extra Trees': ExtraTreesClassifier(),
}

models = {name: MultiOutputClassifier(model) for name, model in base_models.items()}

# -------------------- Evaluation Function --------------------
def evaluate_multioutput_models(X, y, models, n_splits=5, n_runs=5):
    results = []
    for name, model in models.items():
        print(f"\nEvaluating {name}...")
        region_accuracies, month_accuracies = [], []

        for run in range(n_runs):
            print(f"Run {run + 1}/{n_runs}...")
            kf = KFold(n_splits=n_splits, shuffle=True, random_state=42 + run)
            run_region, run_month = [], []

            for train_idx, test_idx in kf.split(X):
                X_train, X_test = X.iloc[train_idx], X.iloc[test_idx]
                y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]

                model.fit(X_train, y_train)
                y_pred = model.predict(X_test)

                r_acc = accuracy_score(y_test['Region'], y_pred[:, 0])
                m_acc = accuracy_score(y_test['Month'], y_pred[:, 1])
                run_region.append(r_acc)
                run_month.append(m_acc)

            avg_r, avg_m = np.mean(run_region), np.mean(run_month)
            region_accuracies.append(avg_r)
            month_accuracies.append(avg_m)
            print(f"Run {run + 1} - Region Accuracy: {avg_r:.4f}, Month Accuracy: {avg_m:.4f}")

        final_r, final_m = np.mean(region_accuracies), np.mean(month_accuracies)
        print(f"Average Region Accuracy: {final_r:.4f}, Month Accuracy: {final_m:.4f}")
        results.append({
            'Model': name,
            'Average Region Accuracy': final_r,
            'Average Month Accuracy': final_m
        })

    return pd.DataFrame(results)

# -------------------- Separate Evaluation for CatBoost --------------------
def evaluate_catboost_multi_target(X, y, n_splits=5, n_runs=5):
    print("\nEvaluating CatBoost (separate models for Region & Month)...")
    region_accuracies, month_accuracies = [], []

    for run in range(n_runs):
        print(f"Run {run + 1}/{n_runs}...")
        kf = KFold(n_splits=n_splits, shuffle=True, random_state=42 + run)
        run_region, run_month = [], []

        for train_idx, test_idx in kf.split(X):
            X_train, X_test = X.iloc[train_idx], X.iloc[test_idx]
            y_train_region = y['Region'].iloc[train_idx]
            y_test_region = y['Region'].iloc[test_idx]
            y_train_month = y['Month'].iloc[train_idx]
            y_test_month = y['Month'].iloc[test_idx]

            model_r = CatBoostClassifier(verbose=0, iterations=100)
            model_m = CatBoostClassifier(verbose=0, iterations=100)

            model_r.fit(X_train, y_train_region)
            model_m.fit(X_train, y_train_month)

            pred_r = model_r.predict(X_test)
            pred_m = model_m.predict(X_test)

            run_region.append(accuracy_score(y_test_region, pred_r))
            run_month.append(accuracy_score(y_test_month, pred_m))

        avg_r = np.mean(run_region)
        avg_m = np.mean(run_month)
        print(f"Run {run + 1} - Region Accuracy: {avg_r:.4f}, Month Accuracy: {avg_m:.4f}")
        region_accuracies.append(avg_r)
        month_accuracies.append(avg_m)

    final_r = np.mean(region_accuracies)
    final_m = np.mean(month_accuracies)
    print(f"\nCatBoost Accuracy - Region: {final_r:.4f}, Month: {final_m:.4f}")
    return {
        'Model': 'CatBoost (Separate)',
        'Average Region Accuracy': final_r,
        'Average Month Accuracy': final_m
    }

# -------------------- Run Evaluations --------------------
results_df = evaluate_multioutput_models(X, y, models, n_runs=5)
catboost_result = evaluate_catboost_multi_target(X, y)

results_df = pd.concat([results_df, pd.DataFrame([catboost_result])], ignore_index=True)
results_df = results_df.sort_values(by=['Average Region Accuracy', 'Average Month Accuracy'], ascending=False)
results_df.reset_index(drop=True, inplace=True)

print("\nFinal Evaluation Results (Sorted):")
print(results_df)